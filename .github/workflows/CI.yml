name: CI

on: pull_request

env:
  CACHED_DEPENDENCY_PATHS: ${{ github.workspace }}/Tuist/Dependencies

jobs:
  prepare-ci:
    name: Prepare CI
    runs-on: ubuntu-latest
    outputs:
      TYPE: ${{ steps.get_type.outputs.TYPE }}
      NAME: ${{ steps.get_name.outputs.NAME }}
    steps:
    - uses: actions/checkout@v1
    - name: Get branch name
      uses: tj-actions/branch-names@v5.2
      id: branch-name
    - name: Get Type
      run: |
        echo Type: ${{ steps.branch-name.outputs.current_branch }} | cut -d / -f 1
        echo ::set-output name=TYPE::$(echo ${{ steps.branch-name.outputs.current_branch }} | cut -d / -f 1)
      id: get_type
    - name: Get Name
      run: |
        echo Name: ${{ steps.branch-name.outputs.current_branch }} | cut -d / -f 2
        echo ::set-output name=NAME::$(echo ${{ steps.branch-name.outputs.current_branch }} | cut -d / -f 2)
      id: get_name

  check-skip:
    name: Check to skip CI
    needs: prepare-ci
    runs-on: ubuntu-latest
    if: contains(needs.prepare-ci.outputs.TYPE, 'Application') || contains(needs.prepare-ci.outputs.TYPE, 'Modules') || contains(needs.prepare-ci.outputs.TYPE, 'Services')
    steps:
        - run: echo "Needs to CI"

  install-dependencies:
    name: Install dependencies
    runs-on: macOS-latest
    needs: [prepare-ci, check-skip]
    steps:
    - uses: actions/checkout@v2
    - name: install needs
      run: |
        bash <(curl -Ls https://install.tuist.io)
    - name: Compute dependency cache key
      id: compute_lockfile_hash
      run: echo "::set-output name=hash::${{ hashFiles('Tuist/Dependencies.swift') }}"
    - name: Check dependency cache
      uses: actions/cache@v2
      id: cache_dependencies
      with:
        path: ${{ env.CACHED_DEPENDENCY_PATHS }}
        key: ${{ steps.compute_lockfile_hash.outputs.hash }}
    - name: Install dependencies
      if: steps.cache_dependencies.outputs.cache-hit == ''
      run: tuist fetch
    outputs:
      dependency_cache_key: ${{ steps.compute_lockfile_hash.outputs.hash }}
    

  CI:
    runs-on: macOS-latest
    needs: install-dependencies

    steps:
    - uses: actions/checkout@v2

    - name: install needs
      run: |
        bash <(curl -Ls https://install.tuist.io)

    - name: Check dependency cache
      uses: actions/cache@v2
      with:
        path: ${{ env.CACHED_DEPENDENCY_PATHS }}
        key: ${{ needs.install-dependencies.outputs.dependency_cache_key }}

    - name: cd target type directory
      run: |
        cd ${{ needs.prepare-ci.outputs.TYPE }}
        if [ ${{ needs.prepare-ci.outputs.TYPE }} != "Application" ]
        then
          cd ${{ needs.prepare-ci.outputs.NAME }}
        fi
        echo ::set-output name=PATH::$(pwd)
      id: working-directory

    - name: ⚡️ build codes
      working-directory: ${{ steps.working-directory.outputs.PATH }}
      run: tuist build

    - name: Check tests existence
      id: check_tests_existence
      uses: andstor/file-existence-action@v1
      with:
        files: "${{ steps.working-directory.outputs.PATH }}/Tests"

    - name: 🧪 test codes
      if: ${{ steps.check_tests_existence.outputs.files_exists == 'true' }}
      working-directory: ${{ steps.working-directory.outputs.PATH }}
      run: tuist test
