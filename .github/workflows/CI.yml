name: CI

on:
  pull_request:
    branches:
      - develop

env:
  CACHED_DEPENDENCY_PATHS: ${{ github.workspace }}/Tuist/Dependencies

jobs:
  prepare-ci:
    name: Prepare CI
    runs-on: ubuntu-latest
    outputs:
      CI-NEEDED: ${{ steps.check_ci_needed.CI-NEEDED }}
      WROKING-PATH: ${{ get_working_directory.outputs.PATH }}
      TESTS-EXISTENCE: ${{ steps.check_tests_existence.outputs.files_exists }}
    steps:
    - uses: actions/checkout@v1

    - name: Get branch name
      uses: tj-actions/branch-names@v5.2
      id: branch-name

    - name: Get Type
      id: get_type
      run: |
        echo ${{ steps.branch-name.outputs.current_branch }} | cut -d / -f 1
        echo ::set-output name=TYPE::$(echo ${{ steps.branch-name.outputs.current_branch }} | cut -d / -f 1)

    - name: Get Name
      id: get_name
      run: |
        echo ${{ steps.branch-name.outputs.current_branch }} | cut -d / -f 2
        echo ::set-output name=NAME::$(echo ${{ steps.branch-name.outputs.current_branch }} | cut -d / -f 2)

    - name: Check ci needed
      id: check_ci_needed
      run: |
        echo ::set-output name=CI-NEEDED::$(contains(steps.get_type.outputs.TYPE, 'Application') || contains(steps.get_type.outputs.TYPE, 'Modules') || contains(steps.get_type.outputs.TYPE, 'Services'))

    - name: Get Working Directory
      id: get_working_directory
      if: steps.check_ci_needed.outputs.CI-NEEDED == true
      run: |
        cd ${{ steps.get_type.outputs.TYPE }}
        if [ ${{ steps.get_type.outputs.TYPE }} != "Application" ]
        then
          cd ${{ steps.get_name.outputs.NAME }}
        fi
        echo ::set-output name=PATH::$(pwd)

    - name: Check tests existence
      id: check_tests_existence
      if: steps.check_ci_needed.outputs.CI-NEEDED == true
      uses: andstor/file-existence-action@v1
      with:
        files: "${{ steps.get_working_directory.outputs.PATH }}/Tests"
      



  build:
    name: ‚ö°Ô∏è Build
    runs-on: macOS-latest
    needs: prepare-ci
    if: needs.prepare-ci.outputs.CI-NEEDED == 'true'

    steps:
    - uses: actions/checkout@v2

    - name: install needs
      run: |
        bash <(curl -Ls https://install.tuist.io)

    - name: Compute dependency cache key
      id: compute_hash
      run: echo "::set-output name=hash::${{ hashFiles('Tuist/Dependencies.swift') }}"

    - name: Check dependency cache
      uses: actions/cache@v3
      id: cache_dependencies
      with:
        path: ${{ env.CACHED_DEPENDENCY_PATHS }}
        key: ${{ steps.compute_hash.outputs.hash }}

    - name: Install dependencies
      if: steps.cache_dependencies.outputs.cache-hit != 'true'
      run: tuist fetch

    - name: build codes
      working-directory: ${{ needs.prepare-ci.outputs.WROKING-PATH }}
      run: tuist build



  test:
    name: üß™ Test
    runs-on: macOS-latest
    needs: [prepare-ci]
    if: needs.prepare-ci.outputs.TESTS-EXISTENCE == 'true'

    steps:
    - uses: actions/checkout@v2

    - name: install needs
      run: |
        bash <(curl -Ls https://install.tuist.io)

    - name: Compute dependency cache key
      id: compute_hash
      run: echo "::set-output name=hash::${{ hashFiles('Tuist/Dependencies.swift') }}"

    - name: Check dependency cache
      uses: actions/cache@v3
      id: cache_dependencies
      with:
        path: ${{ env.CACHED_DEPENDENCY_PATHS }}
        key: ${{ steps.compute_hash.outputs.hash }}

    - name: Install dependencies
      if: steps.cache_dependencies.outputs.cache-hit != 'true'
      run: tuist fetch

    - name: test codes
      working-directory: ${{ needs.prepare-ci.outputs.WROKING-PATH }}
      run: tuist test

